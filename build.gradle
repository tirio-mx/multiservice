import org.apache.tools.ant.filters.ReplaceTokens;
import groovy.util.ConfigObject;

buildscript {
ext {
        springBootVersion = '2.3.12.RELEASE'
        springDependencyManager = '1.0.9.RELEASE'
    }
 
    repositories {
       maven {
          url "https://plugins.gradle.org/m2/"
       }
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}'
    }
}

plugins {
   id 'java'
   id 'eclipse'
   id 'idea'
   id 'jacoco'
   id 'com.github.kt3k.coveralls' version '2.6.3'
   id 'org.springframework.boot' version '2.3.12.RELEASE'
   id 'io.spring.dependency-management' version '1.0.9.RELEASE'
   id 'net.researchgate.release' version '2.8.0'
   id 'org.sonarqube' version '2.8'
}

group = 'mx.tirio.app'

apply from: "${rootDir}/jacoco.gradle"
apply plugin: 'net.researchgate.release'
apply plugin: 'org.springframework.boot'

apply plugin: 'checkstyle'

jar {
    manifest {
        attributes 'Implementation-Title': project.name,
                   'Implementation-Version': project.version,
                   'Implementation-Vendor-Id': project.group,
                   'Implementation-Vendor': 'TIRIO',
                   'Implementation-URL': 'multiservice.tirio.mx'
    }
}

test {
    jvmArgs "-DVAR_1=Value1", "-DVAR_2=Value2"
    systemProperty "file.encoding", "utf-8"
}

ext {
	minCoverageRates = [
		'instruction': 0,
		'branch'     : 0,
		'line'       : 0,
		'complexity' : 0,
		'method'     : 0,
		'class'      : 0
	]
	coverageExclusions = [
         	'mx/tirio/app/multiservice/Application.class',
            'mx/tirio/app/multiservice/model/**',
			'mx/tirio/app/multiservice/config/**'
	]
}

checkstyle {
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    source ='src/main/java'
}

sonarqube {
    properties {
        property "sonar.buildbreaker.skip" , "false"
        property "sonar.exclusions", 
                 "**Application**, **HttpExceptionHandler**, **ExceptionFormat**, **ValidatorUtils**, **mx/com/interware/msr/model/**, **mx/com/interware/msr/config/**"
        property "sonar.coverage.exclusions", 
                 "**Application**, **HttpExceptionHandler**, **ExceptionFormat**, **ValidatorUtils**, **mx/com/interware/msr/model/**, **mx/com/interware/msr/config/**"
    }
}

description = 'Multiservice App'
sourceCompatibility = '11'
targetCompatibility = '11'

repositories {
   mavenLocal()
   mavenCentral()
   maven { url "https://repo.spring.io/libs-release" }
}

ext {
	set('springCloudVersion', "Hoxton.SR1")
}

dependencies {
    implementation group: 'com.h2database', name: 'h2', version: '1.4.200'
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
   
	implementation("org.springframework.boot:spring-boot-starter-web-services:2.3.3.RELEASE") {
		exclude group: 'org.hibernate.validator', module: 'hibernate-validator'
	}
	implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-jersey'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix:2.2.9.RELEASE'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.retry:spring-retry:1.3.4')
        
	implementation('com.zaxxer:HikariCP')
 	implementation('org.springframework.cloud:spring-cloud-starter-openfeign:2.2.6.RELEASE')
 	
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation('io.springfox:springfox-swagger2:2.9.2')
	implementation('io.springfox:springfox-swagger-ui:2.9.2')
	
	testImplementation group: 'com.h2database', name: 'h2', version: '1.3.148'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}	
	compileOnly 'org.projectlombok:lombok:1.18.10'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:2.3.12.RELEASE'
	annotationProcessor 'org.projectlombok:lombok:1.18.10'
	testImplementation('org.springframework.boot:spring-boot-starter-test:2.3.12.RELEASE') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	} 

	testImplementation(platform('org.junit:junit-bom:5.7.2'))
	testImplementation('org.junit.jupiter:junit-jupiter')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

test {
    useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

javadoc {
    failOnError = false
}

springBoot {  
   buildInfo()
}
